"use client";

import { useEffect, useState } from "react";
import Image from "next/image";

type Section = {
  heading: string;
  content: string;
  items: { title: string; description: string }[];
};

export default function JavascriptSource() {
  const [data, setData] = useState<Section[] | null>(null);

  useEffect(() => {
    setData([
      {
        heading: "üìú Description du challenge",
        content:
          "Dans ce challenge Root.me de la cat√©gorie Web Client, une fen√™tre pop-up `prompt()` s‚Äôaffichait √† l‚Äôouverture de la page pour demander un mot de passe. Si l‚Äôutilisateur saisissait un mot de passe incorrect ou annulait, il √©tait redirig√© vers une page blanche.",
        items: [
          {
            title: "Nom du challenge",
            description: "JAVASCRIPT SOURCE ‚Äì Web Client",
          },
          {
            title: "Comportement initial",
            description:
              "Un `prompt()` bloque l'acc√®s √† la page, avec redirection forc√©e en cas d‚Äô√©chec.",
          },
          {
            title: "Probl√®me √† r√©soudre",
            description:
              "Trouver le mot de passe attendu pour valider l‚Äôacc√®s √† la page prot√©g√©e.",
          },
        ],
      },
      {
        heading: "üîç Exploration du code source",
        content:
          "En inspectant le code source avec les outils d√©veloppeur, j‚Äôai remarqu√© un fichier `login.js` charg√© dans la page. En ouvrant ce fichier dans l‚Äôonglet 'Sources' du navigateur, on peut directement lire la logique JavaScript de v√©rification du mot de passe.",
        items: [
          {
            title: "Fichier d√©tect√©",
            description:
              "`login.js` contenait une condition du type `if (password === '123456azerty')`.",
          },
          {
            title: "Extraction de la solution",
            description:
              "Le mot de passe √©tait cod√© en dur dans la condition. Il suffisait de le copier et de le coller dans le prompt pour r√©ussir le challenge.",
          },
          {
            title: "Pas de s√©curit√© r√©elle",
            description:
              "Puisque toute la logique √©tait ex√©cut√©e c√¥t√© client, le challenge pouvait √™tre r√©solu sans aucune tentative brutale ni analyse r√©seau.",
          },
        ],
      },
      {
        heading: "üìö Conclusion et bonnes pratiques",
        content:
          "Ce challenge illustre pourquoi toute logique d‚Äôauthentification ne doit jamais reposer uniquement sur du code JavaScript ex√©cut√© c√¥t√© client. Les fichiers JS sont publics et lisibles, ce qui rend ce type de protection inefficace.",
        items: [
          {
            title: "Visibilit√© du JavaScript",
            description:
              "Tout script charg√© dans le navigateur est consultable. Il ne faut jamais y stocker d‚Äôinformations sensibles.",
          },
          {
            title: "S√©paration frontend/backend",
            description:
              "La validation des identifiants ou des acc√®s doit imp√©rativement √™tre r√©alis√©e c√¥t√© serveur.",
          },
          {
            title: "R√©flexe s√©curit√©",
            description:
              "Toujours inspecter les fichiers JS li√©s √† une page quand un comportement semble √©trange. Ils peuvent r√©v√©ler des erreurs de logique ou d‚Äôimpl√©mentation.",
          },
        ],
      },
    ]);
  }, []);

  if (!data) return <p className="text-center py-10">Chargement...</p>;

  return (
    <main className="min-h-screen bg-gray-100 text-gray-800">
      <div className="max-w-4xl mx-auto px-6 py-12">
        <h1 className="text-4xl font-bold mb-2 text-blue-900">
          JAVASCRIPT SOURCE ‚Äì Cat√©gorie Web Client
        </h1>
        <p className="text-sm text-gray-500 mb-6">
          Analyse d‚Äôun challenge o√π le mot de passe √©tait stock√© en dur dans un
          fichier JavaScript public.
        </p>

        {/* Image 1 : pop-up + redirection */}
        <div className="relative w-full h-[400px] mb-8">
          <Image
            src="/javascript-source/pic-1.png" // ‚Üê √† remplacer
            alt="Prompt bloquant la page"
            fill
            className="object-contain"
          />
        </div>

        {data.map((section, i) => (
          <section key={i} className="mb-12">
            <h2 className="text-2xl font-semibold text-blue-700 mb-3">
              {section.heading}
            </h2>
            <p className="mb-4 text-gray-700">{section.content}</p>
            <ul className="space-y-4">
              {section.items.map((item, j) => (
                <li
                  key={j}
                  className="bg-white shadow rounded p-4 border-l-4 border-blue-500"
                >
                  <h3 className="font-semibold text-lg">{item.title}</h3>
                  <p className="text-gray-600">{item.description}</p>
                </li>
              ))}
            </ul>

            {/* Image 2 : code JS dans login.js */}
            {i === 1 && (
              <div className="relative w-full h-[400px] my-6">
                <Image
                  src="/javascript-source/pic-2.png" // ‚Üê √† remplacer
                  alt="Mot de passe visible dans login.js"
                  fill
                  className="object-contain"
                />
              </div>
            )}
          </section>
        ))}

        <footer className="mt-10 text-center text-gray-400 text-sm">
          ¬© {new Date().getFullYear()} Mon Blog.
        </footer>
      </div>
    </main>
  );
}
