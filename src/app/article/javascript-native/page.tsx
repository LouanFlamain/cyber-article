"use client";

import { useEffect, useState } from "react";
import Image from "next/image";

type Section = {
  heading: string;
  content: string;
  items: { title: string; description: string }[];
};

export default function JavascriptNative() {
  const [data, setData] = useState<Section[] | null>(null);

  useEffect(() => {
    setData([
      {
        heading: "üß† Contexte du challenge",
        content:
          "Le challenge 'JavaScript Native' sur Root.me est bas√© sur une technique d'obfuscation pouss√©e avec du code JavaScript minimaliste. Aucun champ de formulaire, aucun mot de passe apparent : tout est masqu√© dans une balise `<script>` extr√™mement compress√©e.",
        items: [
          {
            title: "Nom du challenge",
            description: "JAVASCRIPT NATIVE ‚Äì Web Client",
          },
          {
            title: "Sp√©cificit√©",
            description:
              "Le script utilise uniquement des caract√®res natifs (`[]`, `!`, `+`, `~`, etc.) pour reconstruire dynamiquement une fonction.",
          },
          {
            title: "But",
            description:
              "Comprendre ce que fait le script pour en extraire le mot de passe cach√©.",
          },
        ],
      },
      {
        heading: "üîç M√©thode de r√©solution",
        content:
          "Le script √©tant totalement illisible, il fallait l'ex√©cuter dans la console pour obtenir une fonction JS native en retour. Ensuite, on utilisait `.toString()` sur cette fonction pour obtenir le contenu exact du code d√©obfusqu√©.",
        items: [
          {
            title: "√âtape 1 ‚Äì Execution du code",
            description:
              "Apr√®s avoir copi√© le script dans la console, une fonction a √©t√© retourn√©e sans erreur.",
          },
          {
            title: "√âtape 2 ‚Äì Lecture du code r√©el",
            description:
              "En utilisant `.toString()` sur la fonction retourn√©e, on obtenait du code source lisible avec le mot de passe visible dans une variable ou un `alert()`.",
          },
          {
            title: "R√©sultat",
            description:
              "Le mot de passe √©tait finalement directement accessible dans le corps de la fonction affich√©e par `.toString()`.",
          },
        ],
      },
      {
        heading: "üìö Le√ßons √† tirer",
        content:
          "Ce type de challenge illustre bien comment un d√©veloppeur peut volontairement masquer du code pour freiner l‚Äôanalyse, sans pour autant prot√©ger efficacement l‚Äôinformation. Toute ex√©cution c√¥t√© client est, t√¥t ou tard, lisible.",
        items: [
          {
            title: "Obfuscation extr√™me ‚â† s√©curit√©",
            description:
              "M√™me les scripts les plus illisibles sont ex√©cutables et inspectables depuis la console navigateur.",
          },
          {
            title: "Outils natifs puissants",
            description:
              "Le simple couple `console.log(fn)` + `fn.toString()` permet de r√©v√©ler une grande partie de l‚Äôobfuscation.",
          },
          {
            title: "R√©flexe CTF",
            description:
              "Ne pas paniquer face √† du JS obfusqu√©. Chercher √† l‚Äôex√©cuter, puis analyser ce qui en sort.",
          },
        ],
      },
    ]);
  }, []);

  if (!data) return <p className="text-center py-10">Chargement...</p>;

  return (
    <main className="min-h-screen bg-gray-100 text-gray-800">
      <div className="max-w-4xl mx-auto px-6 py-12">
        <h1 className="text-4xl font-bold mb-2 text-blue-900">
          JAVASCRIPT NATIVE ‚Äì Cat√©gorie Web Client
        </h1>
        <p className="text-sm text-gray-500 mb-6">
          Analyse d‚Äôun challenge bas√© sur du JavaScript obfusqu√© natif, r√©solu
          via la console.
        </p>

        {/* Image 1 : affichage du script dans la page */}
        <div className="relative w-full h-[400px] mb-8">
          <Image
            src="/native/pic-1.png" // ‚Üê √† remplacer
            alt="Script natif obfusqu√© dans le HTML"
            fill
            className="object-contain"
          />
        </div>

        {data.map((section, i) => (
          <section key={i} className="mb-12">
            <h2 className="text-2xl font-semibold text-blue-700 mb-3">
              {section.heading}
            </h2>
            <p className="mb-4 text-gray-700">{section.content}</p>
            <ul className="space-y-4">
              {section.items.map((item, j) => (
                <li
                  key={j}
                  className="bg-white shadow rounded p-4 border-l-4 border-blue-500"
                >
                  <h3 className="font-semibold text-lg">{item.title}</h3>
                  <p className="text-gray-600">{item.description}</p>
                </li>
              ))}
            </ul>

            {/* Image 2 : r√©sultat apr√®s toString() */}
            {i === 1 && (
              <div className="relative w-full h-[400px] my-6">
                <Image
                  src="/native/pic-2.png" // ‚Üê √† remplacer
                  alt="R√©sultat toString() de la fonction JS"
                  fill
                  className="object-contain"
                />
              </div>
            )}
          </section>
        ))}

        <footer className="mt-10 text-center text-gray-400 text-sm">
          ¬© {new Date().getFullYear()} Mon Blog.
        </footer>
      </div>
    </main>
  );
}
