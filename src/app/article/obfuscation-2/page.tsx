"use client";

import { useEffect, useState } from "react";
import Image from "next/image";

type Section = {
  heading: string;
  content: string;
  items: { title: string; description: string }[];
};

export default function Obfuscation2() {
  const [data, setData] = useState<Section[] | null>(null);

  useEffect(() => {
    setData([
      {
        heading: "üß† Pr√©sentation du challenge",
        content:
          "Le challenge 'Obfuscation 2' sur Root.me va plus loin que le pr√©c√©dent. Le mot de passe est d'abord encod√© en √©chappement web (ex. `%36%39`), puis transform√© en codes ASCII via `String.fromCharCode`. Le but est de reconstituer manuellement la cha√Æne d'origine.",
        items: [
          {
            title: "Nom du challenge",
            description: "OBFUSCATION 2 ‚Äì Web Client",
          },
          {
            title: "Objectif",
            description:
              "Identifier et d√©coder une double obfuscation dans le code JavaScript pour retrouver le mot de passe.",
          },
          {
            title: "Technique utilis√©e",
            description:
              "Combinaison de `decodeURIComponent()` et `String.fromCharCode()`.",
          },
        ],
      },
      {
        heading: "üîç √âtapes de d√©codage",
        content:
          "L‚Äôanalyse du fichier JavaScript montrait une variable contenant une cha√Æne encod√©e, suivie d‚Äôun traitement par `decodeURIComponent`, puis d‚Äôune conversion en caract√®res avec `fromCharCode`.",
        items: [
          {
            title: "√âtape 1 ‚Äì D√©codage URL",
            description:
              "La cha√Æne `%36%39%2C%37%32%2C%37%31` devient `69,72,71` apr√®s `decodeURIComponent()`.",
          },
          {
            title: "√âtape 2 ‚Äì Conversion ASCII",
            description:
              "Avec `String.fromCharCode(69, 72, 71)` on obtient par exemple `EHG`, le mot de passe attendu.",
          },
          {
            title: "Validation",
            description:
              "Apr√®s avoir copi√© ce mot de passe dans le formulaire, le challenge √©tait r√©solu.",
          },
        ],
      },
      {
        heading: "üìö Conclusion",
        content:
          "M√™me avec plusieurs niveaux d‚Äôencodage, ce type de protection ne r√©siste pas √† une analyse attentive du JavaScript. Ce challenge renforce l‚Äôimportance de ne jamais traiter de logique de s√©curit√© uniquement c√¥t√© client.",
        items: [
          {
            title: "Stack d'obfuscation",
            description:
              "Combiner plusieurs techniques ralentit le reverse engineering mais reste vuln√©rable sans chiffrement r√©el.",
          },
          {
            title: "Outils efficaces",
            description:
              "Navigateur + console + fonctions natives JS = combo suffisant pour d√©coder la plupart de ces protections.",
          },
          {
            title: "√Ä √©viter c√¥t√© dev",
            description:
              "Stocker un mot de passe dans une variable visible c√¥t√© client n‚Äôest jamais une bonne pratique.",
          },
        ],
      },
    ]);
  }, []);

  if (!data) return <p className="text-center py-10">Chargement...</p>;

  return (
    <main className="min-h-screen bg-gray-100 text-gray-800">
      <div className="max-w-4xl mx-auto px-6 py-12">
        <h1 className="text-4xl font-bold mb-2 text-blue-900">
          OBFUSCATION 2 ‚Äì Cat√©gorie Web Client
        </h1>
        <p className="text-sm text-gray-500 mb-6">
          Challenge avec double encodage dans du JavaScript : √©chappement web +
          transformation en charCode.
        </p>

        {/* Image 1 ‚Äì vue du code JavaScript avec l‚Äôencodage */}
        <div className="relative w-full h-[400px] mb-8">
          <Image
            src="/obfuscation2/pic-1.png" // ‚Üê √† remplacer
            alt="Code avec cha√Æne encod√©e"
            fill
            className="object-contain"
          />
        </div>

        {data.map((section, i) => (
          <section key={i} className="mb-12">
            <h2 className="text-2xl font-semibold text-blue-700 mb-3">
              {section.heading}
            </h2>
            <p className="mb-4 text-gray-700">{section.content}</p>
            <ul className="space-y-4">
              {section.items.map((item, j) => (
                <li
                  key={j}
                  className="bg-white shadow rounded p-4 border-l-4 border-blue-500"
                >
                  <h3 className="font-semibold text-lg">{item.title}</h3>
                  <p className="text-gray-600">{item.description}</p>
                </li>
              ))}
            </ul>

            {/* Image 2 ‚Äì r√©sultat apr√®s decodeURIComponent */}
            {i === 1 && (
              <div className="relative w-full h-[400px] my-6">
                <Image
                  src="/obfuscation2/pic-2.png" // ‚Üê √† remplacer
                  alt="R√©sultat decodeURIComponent"
                  fill
                  className="object-contain"
                />
              </div>
            )}

            {/* Image 3 ‚Äì r√©sultat final de String.fromCharCode */}
            {i === 2 && (
              <div className="relative w-full h-[400px] my-6">
                <Image
                  src="/obfuscation2/pic-3.png" // ‚Üê √† remplacer
                  alt="Mot de passe d√©cod√© avec String.fromCharCode"
                  fill
                  className="object-contain"
                />
              </div>
            )}
          </section>
        ))}

        <footer className="mt-10 text-center text-gray-400 text-sm">
          ¬© {new Date().getFullYear()} Mon Blog.
        </footer>
      </div>
    </main>
  );
}
