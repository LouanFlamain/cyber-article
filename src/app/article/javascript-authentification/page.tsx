"use client";

import { useEffect, useState } from "react";
import Image from "next/image";

type Section = {
  heading: string;
  content: string;
  items: { title: string; description: string }[];
};

export default function JavascriptAuth() {
  const [data, setData] = useState<Section[] | null>(null);

  useEffect(() => {
    setData([
      {
        heading: "üîç Objectif du challenge",
        content:
          "Ce challenge Root.me de la cat√©gorie Web Client consistait √† contourner une page d‚Äôauthentification g√©r√©e uniquement via JavaScript. Aucun formulaire c√¥t√© serveur ne validait les identifiants, ce qui signifie que le contr√¥le √©tait enti√®rement visible c√¥t√© client.",
        items: [
          {
            title: "Nom du challenge",
            description: "JAVASCRIPT AUTHENTIFICATION ‚Äì Web Client",
          },
          {
            title: "But",
            description:
              "Trouver la combinaison valide de login et mot de passe pour valider la page de connexion.",
          },
          {
            title: "Difficult√©",
            description:
              "Faible √† moyenne ‚Äì bas√©e sur l‚Äôinspection du code source.",
          },
        ],
      },
      {
        heading: "üí° D√©marche de r√©solution",
        content:
          "En ouvrant l‚Äôinspecteur de code du navigateur (F12), j‚Äôai examin√© les fichiers JavaScript attach√©s √† la page. Le script principal contenait en dur les identifiants attendus, compar√©s avec ceux saisis par l‚Äôutilisateur.",
        items: [
          {
            title: "Analyse du code source",
            description:
              "Le fichier `auth.js` incluait une v√©rification du type `if (login === '4dm1n' && password === 'sh.org')`, ce qui exposait directement la solution.",
          },
          {
            title: "Reproduction",
            description:
              "Il suffisait de remplir les champs login/password avec les bonnes valeurs puis de valider le formulaire.",
          },
          {
            title: "Validation",
            description:
              "Une fois les identifiants corrects renseign√©s, le site affichait le flag de r√©ussite.",
          },
        ],
      },
      {
        heading: "üß† Ce que j‚Äôai appris",
        content:
          "Ce challenge montre qu‚Äôune authentification g√©r√©e uniquement c√¥t√© client n‚Äôest pas fiable. Le code JavaScript ex√©cut√© dans le navigateur peut toujours √™tre lu, modifi√© ou contourn√©. C‚Äôest pourquoi toute v√©rification sensible doit √™tre faite c√¥t√© serveur.",
        items: [
          {
            title: "Javascript ‚â† S√©curit√©",
            description:
              "Tout ce qui est c√¥t√© client est accessible. Il ne faut jamais mettre des identifiants en dur dans le code JS.",
          },
          {
            title: "Utilit√© de l‚Äôinspecteur",
            description:
              "C‚Äôest un outil puissant pour comprendre la logique du site et y d√©tecter des failles d‚Äôimpl√©mentation.",
          },
          {
            title: "R√©flexe √† d√©velopper",
            description:
              "Toujours v√©rifier les fichiers inclus dans une page web lors d‚Äôun CTF. Une faille peut simplement √™tre un oubli de s√©curit√© c√¥t√© dev.",
          },
        ],
      },
    ]);
  }, []);

  if (!data) return <p className="text-center py-10">Chargement...</p>;

  return (
    <main className="min-h-screen bg-gray-100 text-gray-800">
      <div className="max-w-4xl mx-auto px-6 py-12">
        <h1 className="text-4xl font-bold mb-2 text-blue-900">
          JAVASCRIPT AUTHENTIFICATION ‚Äì Cat√©gorie Web Client
        </h1>
        <p className="text-sm text-gray-500 mb-6">
          R√©solution d‚Äôun challenge bas√© sur l‚Äôinspection du code source
          JavaScript dans une logique de CTF Web.
        </p>

        {/* Image unique */}
        <div className="relative w-full h-[400px] mb-8">
          <Image
            src="/javascript-authentification/pic-1.png" // ‚Üê remplace par ton image
            alt="Extrait du script avec identifiants en dur"
            fill
            className="object-contain"
          />
        </div>

        {data.map((section, i) => (
          <section key={i} className="mb-12">
            <h2 className="text-2xl font-semibold text-blue-700 mb-3">
              {section.heading}
            </h2>
            <p className="mb-4 text-gray-700">{section.content}</p>
            <ul className="space-y-4">
              {section.items.map((item, j) => (
                <li
                  key={j}
                  className="bg-white shadow rounded p-4 border-l-4 border-blue-500"
                >
                  <h3 className="font-semibold text-lg">{item.title}</h3>
                  <p className="text-gray-600">{item.description}</p>
                </li>
              ))}
            </ul>
          </section>
        ))}

        <footer className="mt-10 text-center text-gray-400 text-sm">
          ¬© {new Date().getFullYear()} Mon Blog.
        </footer>
      </div>
    </main>
  );
}
