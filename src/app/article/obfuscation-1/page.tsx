"use client";

import { useEffect, useState } from "react";
import Image from "next/image";

type Section = {
  heading: string;
  content: string;
  items: { title: string; description: string }[];
};

export default function Obfuscation1() {
  const [data, setData] = useState<Section[] | null>(null);

  useEffect(() => {
    setData([
      {
        heading: "üß† Pr√©sentation du challenge",
        content:
          "Ce challenge de la cat√©gorie Web Client, intitul√© 'Obfuscation 1', visait √† tester notre capacit√© √† reconna√Ætre des cha√Ænes encod√©es de mani√®re trompeuse dans du JavaScript. Le but √©tait de retrouver un mot de passe cach√© dans le code source.",
        items: [
          {
            title: "Nom du challenge",
            description: "OBFUSCATION 1 ‚Äì Web Client",
          },
          {
            title: "But du challenge",
            description:
              "D√©coder un mot de passe masqu√© via des s√©quences d‚Äô√©chappement JavaScript.",
          },
          {
            title: "Difficult√© estim√©e",
            description:
              "Moyenne ‚Äì il fallait comprendre le format d‚Äôencodage et le d√©coder correctement.",
          },
        ],
      },
      {
        heading: "üîç Analyse du JavaScript",
        content:
          "Dans le fichier JavaScript li√© √† la page, une variable contenait une cha√Æne √©trange, sous forme d‚Äô√©chappements : `%4A%61%76%61%53%63%72%69%70%74`. Ce format correspond √† de l‚Äô**URL encoding** (ou encodage web).",
        items: [
          {
            title: "√âtape 1 ‚Äì Rep√©rage de la cha√Æne",
            description:
              'La cha√Æne √©tait stock√©e dans une variable comme `var password = "%4A%61%76..."`.',
          },
          {
            title: "√âtape 2 ‚Äì D√©chiffrement",
            description:
              "J‚Äôai utilis√© la fonction `decodeURIComponent()` dans la console du navigateur pour d√©coder la cha√Æne en texte lisible.",
          },
          {
            title: "R√©sultat obtenu",
            description:
              "Apr√®s d√©codage, j‚Äôai obtenu un mot de passe clair en UTF-8 (ex. : `JavaScript`).",
          },
        ],
      },
      {
        heading: "üß† Le√ßons retenues",
        content:
          "Ce challenge montre √† quel point une simple obfuscation peut ralentir une analyse, mais qu‚Äôun attaquant (ou un pentester) connaissant les outils peut tr√®s facilement contourner ce genre de protection.",
        items: [
          {
            title: "Obfuscation ‚â† S√©curit√©",
            description:
              "Encoder une cha√Æne ne signifie pas la s√©curiser. Toute obfuscation c√¥t√© client est r√©versible.",
          },
          {
            title: "Outils utiles",
            description:
              "La console JavaScript et les fonctions natives comme `decodeURIComponent()` sont tr√®s efficaces pour analyser du code encod√©.",
          },
          {
            title: "Bon r√©flexe",
            description:
              "D√®s qu‚Äôun mot de passe semble 'cach√©', tester les formats comme base64, URL encoding, hex, etc.",
          },
        ],
      },
    ]);
  }, []);

  if (!data) return <p className="text-center py-10">Chargement...</p>;

  return (
    <main className="min-h-screen bg-gray-100 text-gray-800">
      <div className="max-w-4xl mx-auto px-6 py-12">
        <h1 className="text-4xl font-bold mb-2 text-blue-900">
          OBFUSCATION 1 ‚Äì Cat√©gorie Web Client
        </h1>
        <p className="text-sm text-gray-500 mb-6">
          Challenge bas√© sur le d√©codage manuel d‚Äôune cha√Æne encod√©e dans un
          fichier JavaScript visible c√¥t√© client.
        </p>

        {/* Image 1 : cha√Æne obfusqu√©e visible dans le JS */}
        <div className="relative w-full h-[400px] mb-8">
          <Image
            src="/obfuscation1/pic-1.png" // ‚Üê √† remplacer
            alt="Cha√Æne obfusqu√©e dans le fichier JS"
            fill
            className="object-contain"
          />
        </div>

        {data.map((section, i) => (
          <section key={i} className="mb-12">
            <h2 className="text-2xl font-semibold text-blue-700 mb-3">
              {section.heading}
            </h2>
            <p className="mb-4 text-gray-700">{section.content}</p>
            <ul className="space-y-4">
              {section.items.map((item, j) => (
                <li
                  key={j}
                  className="bg-white shadow rounded p-4 border-l-4 border-blue-500"
                >
                  <h3 className="font-semibold text-lg">{item.title}</h3>
                  <p className="text-gray-600">{item.description}</p>
                </li>
              ))}
            </ul>

            {/* Image 2 : r√©sultat du d√©codage */}
            {i === 1 && (
              <div className="relative w-full h-[400px] my-6">
                <Image
                  src="/obfuscation1/pic-2.png" // ‚Üê √† remplacer
                  alt="R√©sultat du d√©codage dans la console"
                  fill
                  className="object-contain"
                />
              </div>
            )}
          </section>
        ))}

        <footer className="mt-10 text-center text-gray-400 text-sm">
          ¬© {new Date().getFullYear()} Mon Blog.
        </footer>
      </div>
    </main>
  );
}
